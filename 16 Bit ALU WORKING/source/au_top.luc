// We use a d flip-flop called state to store the current state
// (for some reason, an FSM didn't work... we spent hours debugging and this was our only hope to clear check-off.. hope to ask Profs)
// initial value in dff is 1, 1 is manual, 0 is auto, so we start with using the manual tester first

module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button 
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output led [8],         // 8 user controllable LEDs
    input io_dip [3][8],       // DIP switches on IO Shield
    input io_button [5],       // 5 buttons on IO Shield 
    // io_button[0] is up, io_button[1] is center, io_button[2] is down, io_button[3] is left, and io_button[4] is right.
    output io_seg[8],          // 7-segment LEDs on IO Shield
    output io_sel[4],          // Digit select on IO Shield
    output io_led [3][8]       // LEDs on IO Shield
  ) {
  
  sig rst;
  sig change_state;
  sig start_auto;
  
  // The reset conditioner is used to synchronize the reset signal to the FPGA
  // clock. This ensures the entire FPGA comes out of reset at the same time.
  .clk(clk) {
      reset_conditioner reset_cond;
      button_conditioner button_cond;
      edge_detector detectPress(#RISE(1), #FALL(0));
    
    .rst(rst) {
      dff state[1](#INIT(1)); // Represent the state manual or auto, 1 is manual, 0 is auto
      manual_alu_tester manual_tester (.io_dip(io_dip), .io_button(io_button) );   
      auto_tester_run auto_tester (.start(start_auto));
    }
  }

  always {
  
    reset_cond.in = ~rst_n;   // input raw inverted reset signal
    rst = reset_cond.out;     // conditioned reset_cond
    led = c{3b0, io_button};  // connect buttons to LEDs
    
    usb_tx = usb_rx;          // loop serial port from documentation
    
    button_cond.in = io_button[1]; // pressing centre button changes between MANUAL and AUTO state
    detectPress.in = button_cond.out;
    change_state = detectPress.out;
     
     
    // We set the initial state of the led, seven_seg and selector here
    io_led = {8b0,8b0,8b0}; 
    
    if (state.q){
          io_seg = manual_tester.io_seg;
          io_sel = manual_tester.io_sel;        
          io_led = manual_tester.io_led;
          start_auto = 0;
          if(change_state){
            state.d = 0;
          }
    } else {
          io_seg = auto_tester.io_seg;
          io_sel = auto_tester.io_sel;
          io_led[2][5:0] = auto_tester.opcode_led; 
          // trigger start of auto tester
          start_auto = 1;
          if(change_state){
            state.d = 1;
    
  }
}