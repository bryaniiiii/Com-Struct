// Run module for our auto tester for the ALU, this file, together with the auto_alu_tester file form
// our automatic tester for the ALU

// This run module takes in the input start, which is fed by the au_top file
// when auto tester is triggered, the start value is set to 1, and triggers the auto tester to start 
// running through all our pre-set test cases.

// Before the always block, we instantiate an FSM that is triggered by the .done attribute of the logic file,
// rather than a counter, thus allowing the test cases to run consecutively.
// Each state of the FSM test_state represents a test case being run, 
// state transitions occur only when the previous test case has finished running and has a 'done' output of 1 
// state transitions for auto_alu_tester occur when the associated statement test case fsm's DONE signal is HIGH

// the output opcode_led allows us to display the ALUFN signal of the particular test case 
// on the LEDs on the IO shield (on the left most row of LEDs)
// to know which function we are testing for.

// If met with an error, the auto tester will halt at the error case, displaying an 'F' on the seven segment display
// meaning that the test case has failed.

// In hindsight, we should have also tested for the outputs z, v and n to account for overflow,
// allowing us to test the exceptional cases such as 16*16

// Note that in test case 23, the error was intentionally fed in by inputting a wrong 'expected' output value for the ALU
// To test all cases, remember to change the expected value for case 23 to the correct input.

module auto_tester_run (
    input clk,  // clock
    input rst,  // reset
    input start,
    output io_seg[8],
    output io_sel[4],
    output opcode_led[6]
  ) {
  
  .clk(clk) {
    .rst(rst) {
      
      fsm test_state = {WAIT, TEST_0, TEST_1, TEST_2, TEST_3, TEST_4, TEST_5, TEST_6, TEST_7, TEST_8, TEST_9, TEST_10, TEST_11, TEST_12, TEST_13, TEST_14, TEST_15, TEST_16, TEST_17, TEST_18, TEST_19, TEST_20, TEST_21, TEST_22, TEST_23, TEST_24, TEST_25, TEST_26, TEST_27, TEST_28, TEST_29, TEST_30, TEST_31, TEST_32, TEST_33};
      
      // testing ADD
      auto_alu_tester test_0 (#INPUT_A(16habcd), #INPUT_B(16hef42), #OPCODE(6b000000), #EXPECTED(16h9b0f));
      auto_alu_tester test_1 (#INPUT_A(16h0168), #INPUT_B(16h0168), #OPCODE(6b000000), #EXPECTED(16h02d0));
      
      //testing SUB
      auto_alu_tester test_2 (#INPUT_A(16h0168), #INPUT_B(16h0000), #OPCODE(6b000001), #EXPECTED(16h0168));
      auto_alu_tester test_3 (#INPUT_A(16habcd), #INPUT_B(16habcd), #OPCODE(6b000001), #EXPECTED(16h0000));
      
      // testing MULT
      auto_alu_tester test_4 (#INPUT_A(16h7fff), #INPUT_B(16h7fff), #OPCODE(6b000010), #EXPECTED(16h0001));
      auto_alu_tester test_5 (#INPUT_A(16h7fff), #INPUT_B(16h0000), #OPCODE(6b000010), #EXPECTED(16h0000));
      
      // testing MODULO
      auto_alu_tester test_6 (#INPUT_A(16h001f), #INPUT_B(16h0015), #OPCODE(6b000111), #EXPECTED(16h000A));
      auto_alu_tester test_7 (#INPUT_A(16h002A), #INPUT_B(16h0000), #OPCODE(6b000111), #EXPECTED(16h002A));
      
      //testing AND
      auto_alu_tester test_8 (#INPUT_A(16h0000), #INPUT_B(16hffff), #OPCODE(6b011000), #EXPECTED(16h0000));
      auto_alu_tester test_9 (#INPUT_A(16hffff), #INPUT_B(16hffff), #OPCODE(6b011000), #EXPECTED(16hffff));
      
      // testing OR
      auto_alu_tester test_10 (#INPUT_A(16h0000), #INPUT_B(16hffff), #OPCODE(6b011110), #EXPECTED(16hffff));
      auto_alu_tester test_11 (#INPUT_A(16h0001), #INPUT_B(16h0010), #OPCODE(6b011110), #EXPECTED(16h0011));
      
      // testing XOR
      auto_alu_tester test_12 (#INPUT_A(16hffff), #INPUT_B(16hffff), #OPCODE(6b010110), #EXPECTED(16h0000));
      auto_alu_tester test_13 (#INPUT_A(16hffff), #INPUT_B(16h0000), #OPCODE(6b010110), #EXPECTED(16hffff));
      
      // testing 'A'
      auto_alu_tester test_14 (#INPUT_A(16h2121), #INPUT_B(16h4242), #OPCODE(6b011010), #EXPECTED(16h2121));
      auto_alu_tester test_15 (#INPUT_A(16h4242), #INPUT_B(16h4242), #OPCODE(6b011010), #EXPECTED(16h4242));
      
      // testing SL
      auto_alu_tester test_16 (#INPUT_A(16hffff), #INPUT_B(16h0001), #OPCODE(6b100000), #EXPECTED(16hFFFE));
      auto_alu_tester test_17 (#INPUT_A(16hffff), #INPUT_B(16h0008), #OPCODE(6b100000), #EXPECTED(16hFF00));
      
      // testing SR
      auto_alu_tester test_18 (#INPUT_A(16hffff), #INPUT_B(16h0001), #OPCODE(6b100001), #EXPECTED(16h7FFF));
      auto_alu_tester test_19 (#INPUT_A(16hffff), #INPUT_B(16h0008), #OPCODE(6b100001), #EXPECTED(16h00FF));
      
      // testing SRA
      auto_alu_tester test_20 (#INPUT_A(16hffff), #INPUT_B(16h0001), #OPCODE(6b100011), #EXPECTED(16hFFFF));
      auto_alu_tester test_21 (#INPUT_A(16h3fff), #INPUT_B(16h0008), #OPCODE(6b100011), #EXPECTED(16h003F));
      
      // testing CEQ
      auto_alu_tester test_22 (#INPUT_A(16h7fff), #INPUT_B(16h7fff), #OPCODE(6b110011), #EXPECTED(16h0001));
          // force-fitted error case - expected should be 0
      auto_alu_tester test_23 (#INPUT_A(16h7fff), #INPUT_B(16h0000), #OPCODE(6b110011), #EXPECTED(16h0001));
      
      // testing CLT
      auto_alu_tester test_24 (#INPUT_A(16h7fff), #INPUT_B(16h7fff), #OPCODE(6b110101), #EXPECTED(16h0000));
      auto_alu_tester test_25 (#INPUT_A(16h0000), #INPUT_B(16h7fff), #OPCODE(6b110101), #EXPECTED(16h0001));
      
      //testing CLE
      auto_alu_tester test_26 (#INPUT_A(16h7fff), #INPUT_B(16h0000), #OPCODE(6b110111), #EXPECTED(16h0000));
      auto_alu_tester test_27 (#INPUT_A(16h2121), #INPUT_B(16h2121), #OPCODE(6b110111), #EXPECTED(16h0001));
      
      // testing NAND
      auto_alu_tester test_28 (#INPUT_A(16h2af0), #INPUT_B(16hafe0), #OPCODE(6b010001), #EXPECTED(16hd51f));
      auto_alu_tester test_29 (#INPUT_A(16hff00), #INPUT_B(16h00ff), #OPCODE(6b010001), #EXPECTED(16hffff));
      
      // testing NOR
      auto_alu_tester test_30 (#INPUT_A(16h2af0), #INPUT_B(16hafe0), #OPCODE(6b011111), #EXPECTED(16h500f));
      auto_alu_tester test_31 (#INPUT_A(16hff00), #INPUT_B(16h00ff), #OPCODE(6b011111), #EXPECTED(16h0000));
      
      // testing XNOR
      auto_alu_tester test_32 (#INPUT_A(16h2af0), #INPUT_B(16hafe0), #OPCODE(6b010111), #EXPECTED(16h7aef));
      auto_alu_tester test_33 (#INPUT_A(16hff00), #INPUT_B(16h00ff), #OPCODE(6b010111), #EXPECTED(16h0000));
      
      }
    }
    
  always {
    io_seg = 0;
    io_sel = 0;
    opcode_led = 0;
    
    // SET ALL auto_alu_tester.start TO 0
    test_0.start = 0;
    test_1.start = 0;
    test_2.start = 0;
    test_3.start = 0;
    test_4.start = 0;
    test_5.start = 0;
    test_6.start = 0;
    test_7.start = 0;
    test_8.start = 0;
    test_9.start = 0;
    test_10.start = 0;
    test_11.start = 0;
    test_12.start = 0;
    test_13.start = 0;
    test_14.start = 0;
    test_15.start = 0;
    test_16.start = 0;
    test_17.start = 0;
    test_18.start = 0;
    test_19.start = 0;
    test_20.start = 0;
    test_21.start = 0;
    test_22.start = 0;
    test_23.start = 0;
    test_24.start = 0;
    test_25.start = 0;
    test_26.start = 0;
    test_27.start = 0;
    test_28.start = 0;
    test_29.start = 0;
    test_30.start = 0;
    test_31.start = 0;
    test_32.start = 0;
    test_33.start = 0;
    
    case (test_state.q){
      test_state.WAIT:
        if(start==1)
          test_state.d = test_state.TEST_0;
      
      // INSERT GENERATED autostate.TEST_n CASES HERE      
      test_state.TEST_0:
          io_seg = test_0.io_seg;
          io_sel = test_0.io_sel;
          opcode_led = test_0.opcode_led;
          test_0.start = 1;
          if(test_0.done==1)
            test_state.d = test_state.TEST_1;
      
        test_state.TEST_1:
          io_seg = test_1.io_seg;
          io_sel = test_1.io_sel;
          opcode_led = test_1.opcode_led;
          test_1.start = 1;
          if(test_1.done==1)
            test_state.d = test_state.TEST_2;
      
        test_state.TEST_2:
          io_seg = test_2.io_seg;
          io_sel = test_2.io_sel;
          opcode_led = test_2.opcode_led;
          test_2.start = 1;
          if(test_2.done==1)
            test_state.d = test_state.TEST_3;
      
        test_state.TEST_3:
          io_seg = test_3.io_seg;
          io_sel = test_3.io_sel;
          opcode_led = test_3.opcode_led;
          test_3.start = 1;
          if(test_3.done==1)
            test_state.d = test_state.TEST_4;
      
        test_state.TEST_4:
          io_seg = test_4.io_seg;
          io_sel = test_4.io_sel;
          opcode_led = test_4.opcode_led;
          test_4.start = 1;
          if(test_4.done==1)
            test_state.d = test_state.TEST_5;
      
        test_state.TEST_5:
          io_seg = test_5.io_seg;
          io_sel = test_5.io_sel;
          opcode_led = test_5.opcode_led;
          test_5.start = 1;
          if(test_5.done==1)
            test_state.d = test_state.TEST_6;
      
        test_state.TEST_6:
          io_seg = test_6.io_seg;
          io_sel = test_6.io_sel;
          opcode_led = test_6.opcode_led;
          test_6.start = 1;
          if(test_6.done==1)
            test_state.d = test_state.TEST_7;
      
        test_state.TEST_7:
          io_seg = test_7.io_seg;
          io_sel = test_7.io_sel;
          opcode_led = test_7.opcode_led;
          test_7.start = 1;
          if(test_7.done)
            test_state.d = test_state.TEST_8;
      
        test_state.TEST_8:
          io_seg = test_8.io_seg;
          io_sel = test_8.io_sel;
          opcode_led = test_8.opcode_led;
          test_8.start = 1;
          if(test_8.done==1)
            test_state.d = test_state.TEST_9;
      
        test_state.TEST_9:
          io_seg = test_9.io_seg;
          io_sel = test_9.io_sel;
          opcode_led = test_9.opcode_led;
          test_9.start = 1;
          if(test_9.done==1)
            test_state.d = test_state.TEST_10;
      
        test_state.TEST_10:
          io_seg = test_10.io_seg;
          io_sel = test_10.io_sel;
          opcode_led = test_10.opcode_led;
          test_10.start = 1;
          if(test_10.done==1)
            test_state.d = test_state.TEST_11;
      
        test_state.TEST_11:
          io_seg = test_11.io_seg;
          io_sel = test_11.io_sel;
          opcode_led = test_11.opcode_led;
          test_11.start = 1;
          if(test_11.done==1)
            test_state.d = test_state.TEST_12;
      
        test_state.TEST_12:
          io_seg = test_12.io_seg;
          io_sel = test_12.io_sel;
          opcode_led = test_12.opcode_led;
          test_12.start = 1;
          if(test_12.done==1)
            test_state.d = test_state.TEST_13;
      
        test_state.TEST_13:
          io_seg = test_13.io_seg;
          io_sel = test_13.io_sel;
          opcode_led = test_13.opcode_led;
          test_13.start = 1;
          if(test_13.done==1)
            test_state.d = test_state.TEST_14;
      
        test_state.TEST_14:
          io_seg = test_14.io_seg;
          io_sel = test_14.io_sel;
          opcode_led = test_14.opcode_led;
          test_14.start = 1;
          if(test_14.done==1)
            test_state.d = test_state.TEST_15;
      
        test_state.TEST_15:
          io_seg = test_15.io_seg;
          io_sel = test_15.io_sel;
          opcode_led = test_15.opcode_led;
          test_15.start = 1;
          if(test_15.done==1)
            test_state.d = test_state.TEST_16;
      
        test_state.TEST_16:
          io_seg = test_16.io_seg;
          io_sel = test_16.io_sel;
          opcode_led = test_16.opcode_led;
          test_16.start = 1;
          if(test_16.done==1)
            test_state.d = test_state.TEST_17;
      
        test_state.TEST_17:
          io_seg = test_17.io_seg;
          io_sel = test_17.io_sel;
          opcode_led = test_17.opcode_led;
          test_17.start = 1;
          if(test_17.done==1)
            test_state.d = test_state.TEST_18;
      
        test_state.TEST_18:
          io_seg = test_18.io_seg;
          io_sel = test_18.io_sel;
          opcode_led = test_18.opcode_led;
          test_18.start = 1;
          if(test_18.done==1)
            test_state.d = test_state.TEST_19;
      
        test_state.TEST_19:
          io_seg = test_19.io_seg;
          io_sel = test_19.io_sel;
          opcode_led = test_19.opcode_led;
          test_19.start = 1;
          if(test_19.done==1)
            test_state.d = test_state.TEST_20;
      
        test_state.TEST_20:
          io_seg = test_20.io_seg;
          io_sel = test_20.io_sel;
          opcode_led = test_20.opcode_led;
          test_20.start = 1;
          if(test_20.done==1)
            test_state.d = test_state.TEST_21;
      
        test_state.TEST_21:
          io_seg = test_21.io_seg;
          io_sel = test_21.io_sel;
          opcode_led = test_21.opcode_led;
          test_21.start = 1;
          if(test_21.done==1)
            test_state.d = test_state.TEST_22;
      
        test_state.TEST_22:
          io_seg = test_22.io_seg;
          io_sel = test_22.io_sel;
          opcode_led = test_22.opcode_led;
          test_22.start = 1;
          if(test_22.done==1)
            test_state.d = test_state.TEST_23;
      
        test_state.TEST_23:
          io_seg = test_23.io_seg;
          io_sel = test_23.io_sel;
          opcode_led = test_23.opcode_led;
          test_23.start = 1;
          if(test_23.done==1)
            test_state.d = test_state.TEST_24;
      
        test_state.TEST_24:
          io_seg = test_24.io_seg;
          io_sel = test_24.io_sel;
          opcode_led = test_24.opcode_led;
          test_24.start = 1;
          if(test_24.done==1)
            test_state.d = test_state.TEST_25;
      
        test_state.TEST_25:
          io_seg = test_25.io_seg;
          io_sel = test_25.io_sel;
          opcode_led = test_25.opcode_led;
          test_25.start = 1;
          if(test_25.done==1)
            test_state.d = test_state.TEST_26;
      
        test_state.TEST_26:
          io_seg = test_26.io_seg;
          io_sel = test_26.io_sel;
          opcode_led = test_26.opcode_led;
          test_26.start = 1;
          if(test_26.done==1)
            test_state.d = test_state.TEST_27;
      
        test_state.TEST_27:
          io_seg = test_27.io_seg;
          io_sel = test_27.io_sel;
          opcode_led = test_27.opcode_led;
          test_27.start = 1;
          if(test_27.done==1)
            test_state.d = test_state.TEST_28;
      
        test_state.TEST_28:
          io_seg = test_28.io_seg;
          io_sel = test_28.io_sel;
          opcode_led = test_28.opcode_led;
          test_28.start = 1;
          if(test_28.done==1)
            test_state.d = test_state.TEST_29;
      
        test_state.TEST_29:
          io_seg = test_29.io_seg;
          io_sel = test_29.io_sel;
          opcode_led = test_29.opcode_led;
          test_29.start = 1;
          if(test_29.done==1)
            test_state.d = test_state.TEST_30;
      
        test_state.TEST_30:
          io_seg = test_30.io_seg;
          io_sel = test_30.io_sel;
          opcode_led = test_30.opcode_led;
          test_30.start = 1;
          if(test_30.done==1)
            test_state.d = test_state.TEST_31;
      
        test_state.TEST_31:
          io_seg = test_31.io_seg;
          io_sel = test_31.io_sel;
          opcode_led = test_31.opcode_led;
          test_31.start = 1;
          if(test_31.done==1)
            test_state.d = test_state.TEST_32;
      
        test_state.TEST_32:
          io_seg = test_32.io_seg;
          io_sel = test_32.io_sel;
          opcode_led = test_32.opcode_led;
          test_32.start = 1;
          if(test_32.done==1)
            test_state.d = test_state.TEST_33;
      
        test_state.TEST_33:
          io_seg = test_33.io_seg;
          io_sel = test_33.io_sel;
          opcode_led = test_33.opcode_led;
          test_33.start = 1;
          if(test_33.done==1)
            test_state.d = test_state.WAIT;
        
      }
      
  }
}
